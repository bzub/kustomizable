apiVersion: batch/v1
kind: Job
metadata:
  name: job
spec:
  template:
    metadata:
      name: tls
    spec:
      serviceAccountName: sa
      restartPolicy: OnFailure
      initContainers:
        - name: etcd-tls
          image: cfssl
          command:
            - /bin/sh
            - -ec
            - |
              cd /secrets/tls

              echo '
              {
                "CN": "etcd-ca",
                "key": {
                  "algo": "rsa",
                  "size": 2048
                }
              }' | \
                cfssl gencert -initca - | \
                cfssljson -bare ca -

              echo '
              {
                "signing": {
                  "default": {
                    "expiry": "43800h",
                    "usages": [
                      "signing",
                      "key encipherment",
                      "server auth",
                      "client auth"
                    ]
                  }
                }
              }' > ca-config.json

              addresses="localhost,127.0.0.1,0:0:0:0:0:0:0:1,${PEER_SVC_NAME},${CLIENT_SVC_NAME},${HEADLESS_SVC_NAME}"

              if [ -n "${VIP_FQDN}" ]; then
                addresses="${addresses},${VIP_FQDN}"
              fi

              last="$((REPLICAS - 1))"
              for i in $(seq 0 "${last}"); do
                addresses="${addresses},${STS_NAME}-${i}"
                addresses="${addresses},${STS_NAME}-${i}.${PEER_SVC_NAME}"
                addresses="${addresses},${STS_NAME}-${i}.${CLIENT_SVC_NAME}"
                addresses="${addresses},${STS_NAME}-${i}.${HEADLESS_SVC_NAME}"
                addresses="${addresses},${STS_NAME}-${i}.${HEADLESS_SVC_NAME}.${NAMESPACE}.svc.${K8S_CLUSTER_DOMAIN}"
              done

              name=server
              echo '
              {
                "CN": "'${name}'",
                "hosts": [""],
                "key": {
                  "algo": "rsa",
                  "size": 2048
                }
              }' | \
                cfssl gencert -config=ca-config.json -ca=ca.pem -ca-key=ca-key.pem -hostname="${addresses}" - | \
                cfssljson -bare "${name}"

              name=peer
              echo '
              {
                "CN": "'${name}'",
                "hosts": [""],
                "key": {
                  "algo": "rsa",
                  "size": 2048
                }
              }' | \
                cfssl gencert -config=ca-config.json -ca=ca.pem -ca-key=ca-key.pem -hostname="${addresses}" - | \
                cfssljson -bare "${name}"

              name=client
              echo '
              {
                "CN": "'${name}'",
                "hosts": [""],
                "key": {
                  "algo": "rsa",
                  "size": 2048
                }
              }' | \
                cfssl gencert -config=ca-config.json -ca=ca.pem -ca-key=ca-key.pem -hostname="" - | \
                cfssljson -bare "${name}"

              mv ca-key.pem ca.key
              mv ca.pem ca.crt
              mv peer-key.pem peer.key
              mv peer.pem peer.crt
              mv server-key.pem server.key
              mv server.pem server.crt
              mv client-key.pem client.key
              mv client.pem client.crt
          volumeMounts:
            - name: certs
              mountPath: /secrets/tls
          envFrom:
            - configMapRef:
                name: cm
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      containers:
        - name: upload-secrets
          image: kubectl
          command:
            - kubectl
            - create
            - secret
            - generic
            - $(SECRET_NAME)
            - --from-file=/secrets/tls/ca.crt
            - --from-file=/secrets/tls/ca.key
            - --from-file=/secrets/tls/client.crt
            - --from-file=/secrets/tls/client.key
            - --from-file=/secrets/tls/peer.crt
            - --from-file=/secrets/tls/peer.key
            - --from-file=/secrets/tls/server.crt
            - --from-file=/secrets/tls/server.key
          volumeMounts:
            - name: certs
              mountPath: /secrets/tls
          envFrom:
            - configMapRef:
                name: cm
      volumes:
        - name: certs
          emptyDir: {}
